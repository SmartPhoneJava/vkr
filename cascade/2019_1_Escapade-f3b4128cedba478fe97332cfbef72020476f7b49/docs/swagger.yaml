basePath: /api
definitions:
  models.Pages:
    properties:
      amount:
        type: integer
    type: object
  models.Result:
    properties:
      message:
        type: string
      place:
        type: string
      success:
        type: boolean
    type: object
  models.UserPrivateInfo:
    properties:
      name:
        example: John
        maxLength: 30
        type: string
      password:
        example: easyPassword
        maxLength: 30
        minLength: 6
        type: string
    type: object
  models.UserPublicInfo:
    properties:
      bestScore:
        type: string
      bestTime:
        type: string
      difficult:
        type: integer
      id:
        type: integer
      name:
        maxLength: 30
        minLength: 3
        type: string
      photo:
        maxLength: 50
        type: string
    type: object
host: localhost:3001
info:
  contact: {}
  description: We don't have a public API, so instead of a real host(explosion.team)
    we specify localhost:3001. To test the following methods, git clone https://github.com/go-park-mail-ru/2019_1_Escapade,
    enter the root directory and run 'docker-compose up -d'
  license: {}
  title: Escapade Explosion API
  version: "1.0"
paths:
  /avatar:
    get:
      description: Get user avatar
      operationId: GetImage
      responses:
        "200":
          description: Avatar found successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: Required authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "404":
          description: Avatar not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: Get user avatar
    post:
      description: Create user avatar
      operationId: PostImage
      responses:
        "201":
          description: Avatar created successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: Required authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: Avatar not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: Create user avatar
  /session:
    delete:
      description: logout
      operationId: Logout
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: Require authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: logout
    post:
      description: login
      operationId: Login
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.UserPublicInfo'
            type: object
        "400":
          description: invalid name or password
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: login
  /user:
    delete:
      description: delete account
      operationId: DeleteAccount
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: delete account
    get:
      description: get public information about that user
      operationId: GetMyProfile
      parameters:
      - description: string enums
        enum:
        - A
        - B
        - C
        in: query
        name: enumstring
        type: string
      - description: int enums
        enum:
        - 1
        - 2
        - 3
        in: query
        name: enumint
        type: integer
      - description: int enums
        enum:
        - 1.1
        - 1.2
        - 1.3
        in: query
        name: enumnumber
        type: number
      - description: string valid
        in: query
        maxLength: 10
        minLength: 5
        name: string
        type: string
      - description: int valid
        in: query
        maximum: 10
        minimum: 1
        name: int
        type: integer
      - default: A
        description: string default
        in: query
        name: default
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Create user successfully
          headers:
            Token:
              description: qwerty
              type: string
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: Invalid information
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: get public information about that user
    post:
      consumes:
      - application/json
      description: create new user
      operationId: Register
      parameters:
      - description: User ingo1
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/models.UserPrivateInfo'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Create user successfully
          headers:
            Token:
              description: qwerty
              type: string
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "400":
          description: Invalid information
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: create new user
    put:
      description: update public info
      operationId: UpdateProfile
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "400":
          description: invalid info
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "401":
          description: need authorization
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: update user information
  /users/{name}/profile:
    get:
      consumes:
      - application/json
      description: get user's best score and best time for a given difficulty, user's
        id, name and photo
      operationId: GetProfile
      parameters:
      - description: User name
        in: path
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Profile found successfully
          schema:
            $ref: '#/definitions/models.UserPublicInfo'
            type: object
        "400":
          description: Invalid username
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: Get public user inforamtion
  /users/{page}:
    get:
      description: Get page of user list
      operationId: GetUsers
      responses:
        "200":
          description: Get successfully
          schema:
            items:
              $ref: '#/definitions/models.Result'
            type: array
        "400":
          description: Invalid pade
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "404":
          description: Users not found
          schema:
            $ref: '#/definitions/models.Result'
            type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: Get users list
  /users/pages_amount:
    get:
      description: Get amount of users list page
      operationId: GetUsersPageAmount
      responses:
        "200":
          description: Get successfully
          schema:
            $ref: '#/definitions/models.Pages'
            type: object
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Result'
            type: object
      summary: amount of users list page
swagger: "2.0"
