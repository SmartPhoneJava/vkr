{
    "swagger": "2.0",
    "info": {
        "description": "We don't have a public API, so instead of a real host(explosion.team) we specify localhost:3001. To test the following methods, git clone https://github.com/go-park-mail-ru/2019_1_Escapade, enter the root directory and run 'docker-compose up -d'",
        "title": "Escapade Explosion API",
        "contact": {},
        "license": {},
        "version": "1.0"
    },
    "host": "localhost:3001",
    "basePath": "/api",
    "paths": {
        "/avatar": {
            "get": {
                "description": "Get user avatar",
                "summary": "Get user avatar",
                "operationId": "GetImage",
                "responses": {
                    "200": {
                        "description": "Avatar found successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Required authorization",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "Avatar not found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "post": {
                "description": "Create user avatar",
                "summary": "Create user avatar",
                "operationId": "PostImage",
                "responses": {
                    "201": {
                        "description": "Avatar created successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Required authorization",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Avatar not found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/session": {
            "post": {
                "description": "login",
                "summary": "login",
                "operationId": "Login",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UserPublicInfo"
                        }
                    },
                    "400": {
                        "description": "invalid name or password",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "delete": {
                "description": "logout",
                "summary": "logout",
                "operationId": "Logout",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "Require authorization",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "get public information about that user",
                "produces": [
                    "application/json"
                ],
                "summary": "get public information about that user",
                "operationId": "GetMyProfile",
                "parameters": [
                    {
                        "enum": [
                            "A",
                            "B",
                            "C"
                        ],
                        "type": "string",
                        "description": "string enums",
                        "name": "enumstring",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "description": "int enums",
                        "name": "enumint",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1.1,
                            1.2,
                            1.3
                        ],
                        "type": "number",
                        "description": "int enums",
                        "name": "enumnumber",
                        "in": "query"
                    },
                    {
                        "maxLength": 10,
                        "minLength": 5,
                        "type": "string",
                        "description": "string valid",
                        "name": "string",
                        "in": "query"
                    },
                    {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "description": "int valid",
                        "name": "int",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "A",
                        "description": "string default",
                        "name": "default",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create user successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        },
                        "headers": {
                            "Token": {
                                "type": "string",
                                "description": "qwerty"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid information",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "put": {
                "description": "update public info",
                "summary": "update user information",
                "operationId": "UpdateProfile",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "400": {
                        "description": "invalid info",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "401": {
                        "description": "need authorization",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "post": {
                "description": "create new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "create new user",
                "operationId": "Register",
                "parameters": [
                    {
                        "description": "User ingo1",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UserPrivateInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create user successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        },
                        "headers": {
                            "Token": {
                                "type": "string",
                                "description": "qwerty"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid information",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete account",
                "summary": "delete account",
                "operationId": "DeleteAccount",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/users/pages_amount": {
            "get": {
                "description": "Get amount of users list page",
                "summary": "amount of users list page",
                "operationId": "GetUsersPageAmount",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Pages"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/users/{name}/profile": {
            "get": {
                "description": "get user's best score and best time for a given difficulty, user's id, name and photo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get public user inforamtion",
                "operationId": "GetProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User name",
                        "name": "name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile found successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UserPublicInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid username",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        },
        "/users/{page}": {
            "get": {
                "description": "Get page of user list",
                "summary": "Get users list",
                "operationId": "GetUsers",
                "responses": {
                    "200": {
                        "description": "Get successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Result"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid pade",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Result"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Pages": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                }
            }
        },
        "models.Result": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "place": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.UserPrivateInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "John"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 6,
                    "example": "easyPassword"
                }
            }
        },
        "models.UserPublicInfo": {
            "type": "object",
            "properties": {
                "bestScore": {
                    "type": "string"
                },
                "bestTime": {
                    "type": "string"
                },
                "difficult": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                },
                "photo": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        }
    }
}