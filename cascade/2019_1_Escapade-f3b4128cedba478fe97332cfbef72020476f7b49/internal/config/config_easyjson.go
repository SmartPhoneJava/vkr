// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig(in *jlexer.Lexer, out *WebSocketSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "writeWait":
			out.WriteWait = time.Duration(in.Int64())
		case "pongWait":
			out.PongWait = time.Duration(in.Int64())
		case "pingPeriod":
			out.PingPeriod = time.Duration(in.Int64())
		case "maxMessageSize":
			out.MaxMessageSize = int64(in.Int64())
		case "readBufferSize":
			out.ReadBufferSize = int(in.Int())
		case "writeBufferSize":
			out.WriteBufferSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig(out *jwriter.Writer, in WebSocketSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"writeWait\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.WriteWait))
	}
	{
		const prefix string = ",\"pongWait\":"
		out.RawString(prefix)
		out.Int64(int64(in.PongWait))
	}
	{
		const prefix string = ",\"pingPeriod\":"
		out.RawString(prefix)
		out.Int64(int64(in.PingPeriod))
	}
	{
		const prefix string = ",\"maxMessageSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxMessageSize))
	}
	{
		const prefix string = ",\"readBufferSize\":"
		out.RawString(prefix)
		out.Int(int(in.ReadBufferSize))
	}
	{
		const prefix string = ",\"writeBufferSize\":"
		out.RawString(prefix)
		out.Int(int(in.WriteBufferSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebSocketSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebSocketSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebSocketSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebSocketSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig1(in *jlexer.Lexer, out *WebSocket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "writeWait":
			out.WriteWait = int(in.Int())
		case "pongWait":
			out.PongWait = int(in.Int())
		case "pingPeriod":
			out.PingPeriod = int(in.Int())
		case "maxMessageSize":
			out.MaxMessageSize = int64(in.Int64())
		case "readBufferSize":
			out.ReadBufferSize = int(in.Int())
		case "writeBufferSize":
			out.WriteBufferSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig1(out *jwriter.Writer, in WebSocket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"writeWait\":"
		out.RawString(prefix[1:])
		out.Int(int(in.WriteWait))
	}
	{
		const prefix string = ",\"pongWait\":"
		out.RawString(prefix)
		out.Int(int(in.PongWait))
	}
	{
		const prefix string = ",\"pingPeriod\":"
		out.RawString(prefix)
		out.Int(int(in.PingPeriod))
	}
	{
		const prefix string = ",\"maxMessageSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxMessageSize))
	}
	{
		const prefix string = ",\"readBufferSize\":"
		out.RawString(prefix)
		out.Int(int(in.ReadBufferSize))
	}
	{
		const prefix string = ",\"writeBufferSize\":"
		out.RawString(prefix)
		out.Int(int(in.WriteBufferSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebSocket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebSocket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebSocket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebSocket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig1(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig2(in *jlexer.Lexer, out *AuthCookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessToken":
			out.AccessToken = string(in.String())
		case "rokenType":
			out.TokenType = string(in.String())
		case "refreshToken":
			out.RefreshToken = string(in.String())
		case "expire":
			out.Expire = string(in.String())
		case "reservePrefix":
			out.ReservePrefix = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig2(out *jwriter.Writer, in AuthCookie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accessToken\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"rokenType\":"
		out.RawString(prefix)
		out.String(string(in.TokenType))
	}
	{
		const prefix string = ",\"refreshToken\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	{
		const prefix string = ",\"expire\":"
		out.RawString(prefix)
		out.String(string(in.Expire))
	}
	{
		const prefix string = ",\"reservePrefix\":"
		out.RawString(prefix)
		out.String(string(in.ReservePrefix))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthCookie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthCookie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthCookie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthCookie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig2(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig3(in *jlexer.Lexer, out *Cookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "length":
			out.Length = int(in.Int())
		case "lifetime":
			out.LifetimeHours = int(in.Int())
		case "httpOnly":
			out.HTTPOnly = bool(in.Bool())
		case "authCookie":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Auth).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig3(out *jwriter.Writer, in Cookie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Int(int(in.Length))
	}
	{
		const prefix string = ",\"lifetime\":"
		out.RawString(prefix)
		out.Int(int(in.LifetimeHours))
	}
	{
		const prefix string = ",\"httpOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.HTTPOnly))
	}
	{
		const prefix string = ",\"authCookie\":"
		out.RawString(prefix)
		out.Raw((in.Auth).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cookie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cookie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cookie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cookie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig3(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig4(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "dependsOn":
			if in.IsNull() {
				in.Skip()
				out.DependsOn = nil
			} else {
				in.Delim('[')
				if out.DependsOn == nil {
					if !in.IsDelim(']') {
						out.DependsOn = make([]string, 0, 4)
					} else {
						out.DependsOn = []string{}
					}
				} else {
					out.DependsOn = (out.DependsOn)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.DependsOn = append(out.DependsOn, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig4(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"dependsOn\":"
		out.RawString(prefix)
		if in.DependsOn == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.DependsOn {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Service) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Service) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Service) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Service) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig4(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig5(in *jlexer.Lexer, out *Auth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "salt":
			out.Salt = string(in.String())
		case "accessTokenExpireHours":
			out.AccessTokenExpireHours = int(in.Int())
		case "refreshTokenExpireHours":
			out.RefreshTokenExpireHours = int(in.Int())
		case "isGenerateRefresh":
			out.IsGenerateRefresh = bool(in.Bool())
		case "withReserve":
			out.WithReserve = bool(in.Bool())
		case "tokenType":
			out.TokenType = string(in.String())
		case "whiteList":
			if in.IsNull() {
				in.Skip()
				out.WhiteList = nil
			} else {
				in.Delim('[')
				if out.WhiteList == nil {
					if !in.IsDelim(']') {
						out.WhiteList = make([]AuthClient, 0, 1)
					} else {
						out.WhiteList = []AuthClient{}
					}
				} else {
					out.WhiteList = (out.WhiteList)[:0]
				}
				for !in.IsDelim(']') {
					var v4 AuthClient
					easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig6(in, &v4)
					out.WhiteList = append(out.WhiteList, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig5(out *jwriter.Writer, in Auth) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"salt\":"
		out.RawString(prefix[1:])
		out.String(string(in.Salt))
	}
	{
		const prefix string = ",\"accessTokenExpireHours\":"
		out.RawString(prefix)
		out.Int(int(in.AccessTokenExpireHours))
	}
	{
		const prefix string = ",\"refreshTokenExpireHours\":"
		out.RawString(prefix)
		out.Int(int(in.RefreshTokenExpireHours))
	}
	{
		const prefix string = ",\"isGenerateRefresh\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsGenerateRefresh))
	}
	{
		const prefix string = ",\"withReserve\":"
		out.RawString(prefix)
		out.Bool(bool(in.WithReserve))
	}
	{
		const prefix string = ",\"tokenType\":"
		out.RawString(prefix)
		out.String(string(in.TokenType))
	}
	{
		const prefix string = ",\"whiteList\":"
		out.RawString(prefix)
		if in.WhiteList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.WhiteList {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig6(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Auth) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Auth) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Auth) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Auth) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig5(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig6(in *jlexer.Lexer, out *AuthClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "id":
			out.ClientID = string(in.String())
		case "secret":
			out.ClientSecret = string(in.String())
		case "scopes":
			if in.IsNull() {
				in.Skip()
				out.Scopes = nil
			} else {
				in.Delim('[')
				if out.Scopes == nil {
					if !in.IsDelim(']') {
						out.Scopes = make([]string, 0, 4)
					} else {
						out.Scopes = []string{}
					}
				} else {
					out.Scopes = (out.Scopes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Scopes = append(out.Scopes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "redirectURL":
			out.RedirectURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig6(out *jwriter.Writer, in AuthClient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ClientID))
	}
	{
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		out.String(string(in.ClientSecret))
	}
	{
		const prefix string = ",\"scopes\":"
		out.RawString(prefix)
		if in.Scopes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Scopes {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"redirectURL\":"
		out.RawString(prefix)
		out.String(string(in.RedirectURL))
	}
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig7(in *jlexer.Lexer, out *Game) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "roomsCapacity":
			out.RoomsCapacity = int32(in.Int32())
		case "connectionCapacity":
			out.ConnectionCapacity = int32(in.Int32())
		case "location":
			out.Location = string(in.String())
		case "closeRoom":
			out.CanClose = bool(in.Bool())
		case "metrics":
			out.Metrics = bool(in.Bool())
		case "field":
			if in.IsNull() {
				in.Skip()
				out.Field = nil
			} else {
				if out.Field == nil {
					out.Field = new(Field)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Field).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig7(out *jwriter.Writer, in Game) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roomsCapacity\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.RoomsCapacity))
	}
	{
		const prefix string = ",\"connectionCapacity\":"
		out.RawString(prefix)
		out.Int32(int32(in.ConnectionCapacity))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"closeRoom\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanClose))
	}
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix)
		out.Bool(bool(in.Metrics))
	}
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix)
		if in.Field == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Field).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Game) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Game) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Game) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Game) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig7(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig8(in *jlexer.Lexer, out *Field) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minAreaSize":
			out.MinAreaSize = int(in.Int())
		case "maxAreaSize":
			out.MaxAreaSize = int(in.Int())
		case "minProbability":
			out.MinProbability = int(in.Int())
		case "maxProbability":
			out.MaxProbability = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig8(out *jwriter.Writer, in Field) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"minAreaSize\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MinAreaSize))
	}
	{
		const prefix string = ",\"maxAreaSize\":"
		out.RawString(prefix)
		out.Int(int(in.MaxAreaSize))
	}
	{
		const prefix string = ",\"minProbability\":"
		out.RawString(prefix)
		out.Int(int(in.MinProbability))
	}
	{
		const prefix string = ",\"maxProbability\":"
		out.RawString(prefix)
		out.Int(int(in.MaxProbability))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Field) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Field) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Field) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Field) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig8(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig9(in *jlexer.Lexer, out *Database) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "driverName":
			out.DriverName = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "connectionString":
			out.ConnectionString = string(in.String())
		case "authConnectionString":
			out.AuthConnectionString = string(in.String())
		case "maxOpenConns":
			out.MaxOpenConns = int(in.Int())
		case "pageGames":
			out.PageGames = int(in.Int())
		case "pageUsers":
			out.PageUsers = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig9(out *jwriter.Writer, in Database) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"driverName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DriverName))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"connectionString\":"
		out.RawString(prefix)
		out.String(string(in.ConnectionString))
	}
	{
		const prefix string = ",\"authConnectionString\":"
		out.RawString(prefix)
		out.String(string(in.AuthConnectionString))
	}
	{
		const prefix string = ",\"maxOpenConns\":"
		out.RawString(prefix)
		out.Int(int(in.MaxOpenConns))
	}
	{
		const prefix string = ",\"pageGames\":"
		out.RawString(prefix)
		out.Int(int(in.PageGames))
	}
	{
		const prefix string = ",\"pageUsers\":"
		out.RawString(prefix)
		out.Int(int(in.PageUsers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Database) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Database) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Database) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Database) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig9(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig10(in *jlexer.Lexer, out *CORS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origins":
			if in.IsNull() {
				in.Skip()
				out.Origins = nil
			} else {
				in.Delim('[')
				if out.Origins == nil {
					if !in.IsDelim(']') {
						out.Origins = make([]string, 0, 4)
					} else {
						out.Origins = []string{}
					}
				} else {
					out.Origins = (out.Origins)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Origins = append(out.Origins, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "headers":
			if in.IsNull() {
				in.Skip()
				out.Headers = nil
			} else {
				in.Delim('[')
				if out.Headers == nil {
					if !in.IsDelim(']') {
						out.Headers = make([]string, 0, 4)
					} else {
						out.Headers = []string{}
					}
				} else {
					out.Headers = (out.Headers)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Headers = append(out.Headers, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "methods":
			if in.IsNull() {
				in.Skip()
				out.Methods = nil
			} else {
				in.Delim('[')
				if out.Methods == nil {
					if !in.IsDelim(']') {
						out.Methods = make([]string, 0, 4)
					} else {
						out.Methods = []string{}
					}
				} else {
					out.Methods = (out.Methods)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Methods = append(out.Methods, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "credentials":
			out.Credentials = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig10(out *jwriter.Writer, in CORS) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"origins\":"
		out.RawString(prefix[1:])
		if in.Origins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Origins {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Headers {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"methods\":"
		out.RawString(prefix)
		if in.Methods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Methods {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		out.String(string(in.Credentials))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CORS) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CORS) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CORS) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CORS) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig10(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig11(in *jlexer.Lexer, out *Server) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "portUrl":
			out.PortURL = string(in.String())
		case "portValue":
			out.PortValue = string(in.String())
		case "readTimeoutS":
			out.ReadTimeoutS = int(in.Int())
		case "writeTimeoutS":
			out.WriteTimeoutS = int(in.Int())
		case "idleTimeoutS":
			out.IdleTimeoutS = int(in.Int())
		case "waitTimeoutS":
			out.WaitTimeoutS = int(in.Int())
		case "execTimeoutS":
			out.ExecTimeoutS = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig11(out *jwriter.Writer, in Server) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"portUrl\":"
		out.RawString(prefix)
		out.String(string(in.PortURL))
	}
	{
		const prefix string = ",\"portValue\":"
		out.RawString(prefix)
		out.String(string(in.PortValue))
	}
	{
		const prefix string = ",\"readTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.ReadTimeoutS))
	}
	{
		const prefix string = ",\"writeTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.WriteTimeoutS))
	}
	{
		const prefix string = ",\"idleTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.IdleTimeoutS))
	}
	{
		const prefix string = ",\"waitTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.WaitTimeoutS))
	}
	{
		const prefix string = ",\"execTimeoutS\":"
		out.RawString(prefix)
		out.Int(int(in.ExecTimeoutS))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Server) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Server) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Server) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Server) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig11(l, v)
}
func easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig12(in *jlexer.Lexer, out *Configuration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "server":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Server).UnmarshalJSON(data))
			}
		case "cors":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cors).UnmarshalJSON(data))
			}
		case "dataBase":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DataBase).UnmarshalJSON(data))
			}
		case "game":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Game).UnmarshalJSON(data))
			}
		case "cookie":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cookie).UnmarshalJSON(data))
			}
		case "websocket":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.WebSocket).UnmarshalJSON(data))
			}
		case "service":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Service).UnmarshalJSON(data))
			}
		case "auth":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Auth).UnmarshalJSON(data))
			}
		case "authClient":
			easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig6(in, &out.AuthClient)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig12(out *jwriter.Writer, in Configuration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix[1:])
		out.Raw((in.Server).MarshalJSON())
	}
	{
		const prefix string = ",\"cors\":"
		out.RawString(prefix)
		out.Raw((in.Cors).MarshalJSON())
	}
	{
		const prefix string = ",\"dataBase\":"
		out.RawString(prefix)
		out.Raw((in.DataBase).MarshalJSON())
	}
	{
		const prefix string = ",\"game\":"
		out.RawString(prefix)
		out.Raw((in.Game).MarshalJSON())
	}
	{
		const prefix string = ",\"cookie\":"
		out.RawString(prefix)
		out.Raw((in.Cookie).MarshalJSON())
	}
	{
		const prefix string = ",\"websocket\":"
		out.RawString(prefix)
		out.Raw((in.WebSocket).MarshalJSON())
	}
	{
		const prefix string = ",\"service\":"
		out.RawString(prefix)
		out.Raw((in.Service).MarshalJSON())
	}
	{
		const prefix string = ",\"auth\":"
		out.RawString(prefix)
		out.Raw((in.Auth).MarshalJSON())
	}
	{
		const prefix string = ",\"authClient\":"
		out.RawString(prefix)
		easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig6(out, in.AuthClient)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Configuration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Configuration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComGoParkMailRu20191EscapadeInternalConfig12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Configuration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Configuration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComGoParkMailRu20191EscapadeInternalConfig12(l, v)
}
